	<script>

		var croquis = new Croquis();
		var height = window.innerHeight
		var width = window.innerWidth
		croquis.setCanvasSize(width, height);
		croquis.addLayer();
		croquis.fillLayer('#fff');

		var brush = new Croquis.Brush();
		croquis.setTool(brush);
		brush.setColor('#fff');
		croquis.setToolStabilizeLevel(10);
		croquis.setToolStabilizeWeight(0.5);

		document.body.appendChild(croquis.getDOMElement());

		document.addEventListener('mouseenter', function (e) {
			croquis.down(e.clientX, e.clientY);
			document.addEventListener('mousemove', onMouseMove);
		});

		function onMouseMove(e) {
			croquis.move(e.clientX, e.clientY);
		}
    
		$(document).ready(function() {
		  $("#mirror-x, #mirror-y").val("Disabled");
			var timeStart = new Date().getTime();
			var idleTime = 0;
			
			$(document).cursometer({
			  onUpdateSpeed: function(speed) {
				  var timeEnd = new Date().getTime();
				  $('.current-speed').html('Current Speed: ' + ((speed * 1000).toFixed(2)) + "  Pixels/Second");
					$('.average-speed').html('Average Speed: ' + (((speed * 1000)/((timeEnd - timeStart)/1000)).toFixed(2)) + "  Pixels/Second")
					if ((speed * 1000) >= 0 && (speed * 1000) <= 20) {
						brush.setSize(50);
						brush.setSpacing(0.3);
					}
					else if ((speed * 1000) > 20 && (speed * 1000) <= 40) {
						brush.setSize(44);
						brush.setSpacing(0.6);
					}
					else if ((speed * 1000) > 40 && (speed * 1000) <= 60) {
						brush.setSize(38);
						brush.setSpacing(1.0);
					}
					else if ((speed * 1000) > 60 && (speed * 1000) <= 80) {
						brush.setSize(32);
						brush.setSpacing(1.5);
					}
					else {
						brush.setSize(26);
						brush.setSpacing(2.0);
					}
				},
				updateSpeedRate: 5
			});

			$(document).idle({
			  onIdle: function() {
					startTime = new Date().getTime();
				},
				onActive: function() {
				  idleTime += (Math.ceil((new Date().getTime() - startTime)/1000));
				},

				idle: 300
			})
			
		  $(document).keyup(function(e) {
	
			  if (e.keyCode == 27) {
					var timeEnd = new Date().getTime();
					var elapsedTime = (timeEnd - timeStart)/1000
					
					$("#myModal").toggle();
					if ((elapsedTime % 60) < 10) {
					  $(".time").html("Time Painting: " + Math.floor(elapsedTime/60) + ":" + "0" + Math.floor(elapsedTime % 60));
					}
					else {
					  $(".time").html("Time Painting: " + Math.floor(elapsedTime/60) + ":" + Math.floor(elapsedTime % 60));
					}
					
					if ((idleTime % 60) < 10) {
						$(".idle").html("Idle Time: " + Math.floor(idleTime/60) + ":" + "0" + Math.floor(idleTime % 60));
					}
					else {
						$(".idle").html("Idle Time: " + Math.floor(idleTime/60) + ":" + Math.floor(idleTime % 60));
					}
					
					$(".activity").html("Activity: " + (100 - parseFloat((idleTime/elapsedTime) * 100)).toFixed(2) + " %");
			  }
				
				if (e.keyCode == 72) {
				  $("#mirror-x").val("Enabled");
					$("#mirror-y").val("Disabled");
				}
				
				if (e.keyCode == 86) {
				  $("#mirror-y").val("Enabled");
					$("#mirror-x").val("Disabled");
				}
				
				if (e.keyCode ==78) {
				  location.reload();
				}
				
				});
				
		  var i = 0;
			
			$("canvas").mousemove(function(e) {
				var timeEnd = new Date().getTime();
				var elapsedTime = (timeEnd - timeStart)/1000

				var colors = ["red", "green", "yellow", "blue", "purple"];
				
				if (i < colors.length) {
				  brush.setColor(colors[i]);
					i++;
					if (i == 5) {
					  i = 0;
					}
				}
			
				$("#mirror-x").click(function () {
				  $(this).val("Enabled");
					$("#mirror-y").val("Disabled");
				});
				
				$("#mirror-y").click(function () {
				  $(this).val("Enabled");
					$("#mirror-x").val("Disabled");
				});
				
				if ($("#mirror-x").val() === "Enabled") {
			    if(e.clientX < width / 2) {
						croquis.fillLayerRect(colors[Math.floor(Math.random() * 5)], (e.clientX + (2 * (width/2 - e.clientX))), e.clientY, brush.getSize(), brush.getSize());
					}
					else {
						croquis.fillLayerRect(colors[Math.floor(Math.random() * 5)], (e.clientX - (2 * (e.clientX - width/2))), e.clientY, brush.getSize(), brush.getSize());
					}
				}
				
				if ($("#mirror-y").val() === "Enabled") {
				  if(e.clientY < height / 2)  {
					  croquis.fillLayerRect(colors[Math.floor(Math.random() * 5)], e.clientX, (e.clientY + (2 * (height/2 - e.clientY))), brush.getSize(), brush.getSize());
					}
					else {
					  croquis.fillLayerRect(colors[Math.floor(Math.random() * 5)], e.clientX, (e.clientY - (2 * (e.ClientY - height/2))), brush.getSize(), brush.getSize());
					}
				}
			});
			
		  $("#close").click(function() {
			  $("#myModal").hide();
			});
		  
			$("#new-painting").click(function() {
			  location.reload();
			});
		
		});
	</script>

<div class="modal bs-example-modal-lg" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">

    <div class="modal-content">
		  <div class="modal-header">
			  <ul class="list-inline">
					<li><h4 class="modal-title">Statistics</h4></li>
					<li class="list-right"><button id ="mirror-x">Horizontal</button></li>
					<li><button id ="mirror-y">Vertical</button></li>
					<li><button id="new-painting">New Painting</button></li>
					<li><button id="close"><span>&times;</span></button></li>
				</ul>
			</div>
      <p class="time"></p>
			<p class="idle"></p>
			<p class="activity"></p>
			<p class="current-speed"></p>
			<p class="average-speed"></p>
    </div>

</div>